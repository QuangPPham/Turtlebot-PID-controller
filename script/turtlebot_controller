#!/usr/bin/env python

import rospy
import tf.transformations as tf
from geometry_msgs.msg import Twist, Pose2D
from nav_msgs.msg import Odometry

from math import pi, sqrt, atan2, cos, sin
import numpy as np

class controller():
    def __init__(self, p, i, d, min, max):
        self.kp = 0.0
        self.ki = 0.0
        self.kd = 0.0
        self.setGains(p, i ,d)

        self.min = np.zeros(2)
        self.max = np.zeros(2)
        self.setMinMax(min, max)

        self.error = np.zeros(2)
        self.last_error = np.zeros(2)
        self.integrator = np.zeros(2)

        self.p_term = np.zeros(2)
        self.i_term = np.zeros(2)
        self.d_term = np.zeros(2)

    def computePID(self, desired, current, dt):
        error_xyz = desired - current
        theta = current[2]

        # linear_error = (x,y)'*(ex,ey)
        linear_error = cos(theta)*error_xyz[0] + sin(theta)*error_xyz[1]
        # linear_error = sqrt(error_xyz[0]**2 + error_xyz[1]**2)

        # Angular error
        # Take shortest angle change into account
        if error_xyz[2] > pi:
            angular_error = -(2*pi-error_xyz[2])
        elif error_xyz[2] < -pi:
            angular_error = 2*pi + error_xyz[2]
        else:
            angular_error = error_xyz[2]

        # Error array
        self.error = np.array([linear_error, angular_error])

        # Calculate terms
        self.p_term = self.error * self.kp

        differential = (self.error - self.last_error)/dt
        self.d_term = differential * self.kd

        self.integrator += abs(self.error) * dt
        self.i_term = self.integrator * self.ki

        u_term = self.p_term + self.d_term + self.i_term

        self.last_error = self.error

        # rospy.loginfo("desired: "+str(desired)+" current: "+str(current))
        # rospy.loginfo("de= "+str(differential[0])+" in= "+str(self.integrator[0]))

        # Saturation
        for i in range(np.size(self.error)):
            if u_term[i] > self.max[i]:
                if not self.i_term[i] == 0:
                    self.integrator[i] = (self.max[i] - self.p_term[i] - self.d_term[i]) / self.ki
                u_term[i] = self.max[i]
            elif u_term[i] < self.min[i]:
                if not self.i_term[i] == 0:
                    self.integrator[i] = (self.min[i] - self.p_term[i] - self.d_term[i]) / self.ki
                u_term[i] = self.min[i]

        return u_term

    def setGains(self, p, i, d):
        self.kp = p
        self.ki = i
        self.kd = d

    def setMinMax(self, min, max):
        self.min = min
        self.max = max



class Turtlebot():
    def __init__(self):
        rospy.init_node("PID_Controller", anonymous=True)
        self.x_desired = 0
        self.y_desired = 0
        self.last_error = 0
        self.last_theta = 0

        # Publisher
        self.vel_pub = rospy.Publisher("/cmd_vel", Twist, queue_size = 10)
        self.rate = rospy.Rate(10)  # 10 Hz -> dt = 0.1
        self.dt = 0.1
        self.cmd = Twist()

        # Stop all actions
        self.stop = Twist()
        self.stop.linear.x = 0
        self.stop.angular.z = 0

        # Subscriber
        self.pose = Pose2D()
        self.pose_sub = rospy.Subscriber("/odom", Odometry, self.sub_callback)

        # Controller
        self.min = np.array([-0.2,-0.7])
        self.max = np.array([0.2,0.7])
        self.control = controller(1.1, 0.05, 0.15, self.min, self.max)
        self.counter = 0

        # Add shutdown hook
        rospy.on_shutdown(self.shutdownhook)

    def setWaypoint(self, x, y):
        self.x_desired = x
        self.y_desired = y

    def run(self):
        while True:
            theta_desired = atan2(self.y_desired-self.pose.y, self.x_desired-self.pose.x)
            # rospy.loginfo(theta_desired)

            desired_values = np.array([self.x_desired, self.y_desired, theta_desired])
            current_values = np.array([self.pose.x, self.pose.y, self.pose.theta])

            u_term = self.control.computePID(desired_values, current_values, self.dt)
            self.cmd.linear.x = u_term[0]
            self.cmd.angular.z = u_term[1]
            self.control.integrator = 0
            
            # rospy.loginfo("linear_vel: "+str(u_term[0])+" angular_vel: "+str(u_term[1]))
 
            self.vel_pub.publish(self.cmd)
            self.rate.sleep()

            error = sqrt((self.x_desired-self.pose.x)**2 + (self.y_desired-self.pose.y)**2)
            if (error < 0.018 or abs(error-self.last_error) <= 2e-7) and self.counter > 1:
                # print(error-self.last_error)
                break

            self.last_error = error
            self.last_theta = theta_desired
            self.counter += 1
        
        rospy.loginfo("At waypoint")

    def sub_callback(self, data):
        quaternion = [data.pose.pose.orientation.x, data.pose.pose.orientation.y, data.pose.pose.orientation.z, data.pose.pose.orientation.w]
        (roll, pitch, yaw) = tf.euler_from_quaternion(quaternion)

        self.pose.x = data.pose.pose.position.x
        self.pose.y = data.pose.pose.position.y
        self.pose.theta = yaw

        # rospy.loginfo("theta=" + str(yaw))
        # rospy.loginfo("odom: x=" + str(self.pose.x) + ";  y=" + str(self.pose.y) + ";  theta=" + str(yaw))

    def shutdownhook(self):
        rospy.loginfo("Shutting down")
        self.vel_pub.publish(self.stop)

def return_point(x, y):
    quang_turtle.setWaypoint(x,y)
    quang_turtle.run()

def sinusoid():
    x = np.linspace(0,pi,80)
    y = np.zeros(np.size(x))
    for i in range(np.size(x)):
        y[i] = sin(2*x[i])
        quang_turtle.setWaypoint(x[i], y[i])
        quang_turtle.run()

def rectangle():
    x = np.linspace(-0.5,0.5,15)
    y = np.linspace(-0.5,0.5,15)

    for xd in x:
        quang_turtle.setWaypoint(xd, y[0])
        quang_turtle.run()

    for yd in y:
        quang_turtle.setWaypoint(x[-1], yd)
        quang_turtle.run()

    for xd in reversed(x):
        quang_turtle.setWaypoint(xd, y[-1])
        quang_turtle.run()

    for yd in reversed(y):
        quang_turtle.setWaypoint(x[0], yd)
        quang_turtle.run()        

if __name__ == "__main__":
    quang_turtle = Turtlebot()
    # return_point(0,0)
    sinusoid()
    # rectangle()